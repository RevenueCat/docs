{
  "guide": "## See how RevenueCat works in practice\n>\n> [demo.revenuecat.com](https://demo.revenuecat.com) is a public-facing demo project provided by RevenueCat. It's used primarily for showcasing how RevenueCat works in practice, including functionality like purchasing, subscriptions, entitlements, and offering configuration, without requiring developers to build a full app from scratch.\n\n# Integrating RevenueCat with React Native and Stripe: A Comprehensive Guide\n\nThis guide covers integrating RevenueCat into your React Native app, connecting it to your backend server, setting up Stripe integrations, managing and tracking user subscriptions, receiving real-time updates via webhooks, analyzing revenue and churn metrics, implementing custom entitlement logic, and ensuring secure API key management.\n\n---\n\n## Table of Contents\n\n- [1. Setting Up Your RevenueCat Project](#1-setting-up-your-revenuecat-project)\n- [2. Installing and Configuring the RevenueCat SDK in React Native](#2-installing-and-configuring-the-revenuecat-sdk-in-react-native)\n- [3. Managing Products and Entitlements](#3-managing-products-and-entitlements)\n- [4. Integrating Stripe with RevenueCat](#4-integrating-stripe-with-revenuecat)\n- [5. Handling Purchases and Restoring Transactions](#5-handling-purchases-and-restoring-transactions)\n- [6. Receiving Real-Time Updates via Webhooks](#6-receiving-real-time-updates-via-webhooks)\n- [7. Analyzing Revenue and Churn Metrics](#7-analyzing-revenue-and-churn-metrics)\n- [8. Implementing Custom Entitlement Logic](#8-implementing-custom-entitlement-logic)\n- [9. Secure API Key Management](#9-secure-api-key-management)\n- [10. Best Practices and Additional Resources](#10-best-practices-and-additional-resources)\n\n---\n\n## 1. Setting Up Your RevenueCat Project\n\nBefore integrating the SDK, create a project in the RevenueCat dashboard:\n\n- Sign up for a free account at [RevenueCat Signup](https://app.revenuecat.com/signup).\n- Create a new project and add your React Native app.\n- Connect your project to the stores and platforms you want to support:\n  - Apple App Store\n  - Google Play Store\n  - Stripe (for web payments)\n\nRefer to the [Connect to a Store guide](https://www.revenuecat.com/docs/projects/connect-a-store) for detailed steps.\n\n---\n\n## 2. Installing and Configuring the RevenueCat SDK in React Native\n\n### Installation\n\nAdd the RevenueCat React Native SDK and the UI package for Customer Center:\n\n```json\n{\n  \"dependencies\": {\n    \"react-native-purchases\": \"<latest version>\",\n    \"react-native-purchases-ui\": \"<latest version>\"\n  }\n}\n```\n\nInstall packages via npm or yarn:\n\n```bash\nnpm install react-native-purchases react-native-purchases-ui\n# or\nyarn add react-native-purchases react-native-purchases-ui\n```\n\n### Initialization\n\nInitialize the SDK early in your app lifecycle with your **public API key** (found in RevenueCat dashboard under **Project Settings > API keys > App specific keys**):\n\n```js\nimport Purchases from 'react-native-purchases';\n\nPurchases.configure({ apiKey: 'public_sdk_key_here' });\n```\n\nEnable debug logs during development to troubleshoot:\n\n```js\nPurchases.setLogLevel(Purchases.LOG_LEVEL.DEBUG);\n```\n\nFor React Native, ensure you initialize with separate API keys for iOS and Android if applicable.\n\nRefer to the [Configuring the SDK guide](https://www.revenuecat.com/docs/getting-started/configuring-sdk) for code samples.\n\n---\n\n## 3. Managing Products and Entitlements\n\n### Store Product Setup\n\n- Configure your in-app products and subscriptions in the respective stores:\n  - [Google Play Console product setup](https://www.revenuecat.com/docs/getting-started/entitlements/android-products)\n  - [Stripe product setup](https://www.revenuecat.com/docs/getting-started/entitlements/stripe-products)\n\n### Importing Products into RevenueCat\n\n- Import products automatically from connected stores or manually add product identifiers in the RevenueCat dashboard.\n- For Google Play subscriptions, include both subscription ID and base plan ID.\n- For Stripe, use the Stripe product ID exactly as it appears in Stripe.\n\n### Creating Entitlements\n\n- Group your products into entitlements to define access levels.\n- Read more on [Entitlements](https://www.revenuecat.com/docs/getting-started/entitlements).\n\n---\n\n## 4. Integrating Stripe with RevenueCat\n\n### Connect Your Stripe Account\n\n- Connect your Stripe account to RevenueCat via the Stripe app integration.\n- Follow the guide to [Connect to your Stripe account](https://www.revenuecat.com/docs/web/connect-stripe-account).\n\n### Create Products and Plans in Stripe\n\n- Create products and prices in the Stripe Dashboard.\n- Only **Package Pricing** and **Standard Pricing** subscription plans with **per unit** pricing are supported.\n- Avoid metered usage and tiered pricing for compatibility.\n\n### Add Stripe Products to RevenueCat\n\n- Add Stripe product IDs to your RevenueCat project entitlements.\n- Ensure the product IDs match exactly.\n\n### Sending Stripe Tokens to RevenueCat\n\nYou can send Stripe subscription tokens to RevenueCat via:\n\n- **Manual API integration**: Post tokens to RevenueCat’s API endpoint with the required headers.\n- **Server-to-server notifications**: Enable Stripe webhooks and the \"Track new purchases from server-to-server notifications\" option in RevenueCat.\n\nExample cURL for manual token submission:\n\n```bash\ncurl --request POST \\\n  --url https://api.revenuecat.com/v1/receipts \\\n  --header 'Authorization: Bearer YOUR_REVENUECAT_STRIPE_APP_PUBLIC_API_KEY' \\\n  --header 'X-Platform: stripe' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"fetch_token\": \"sub_xxx\",\n    \"app_user_id\": \"user_id_here\"\n  }'\n```\n\nRefer to the full [Stripe Billing integration guide](https://www.revenuecat.com/docs/web/integrations/stripe) for details.\n\n---\n\n## 5. Handling Purchases and Restoring Transactions\n\n### Making Purchases\n\nUse the SDK’s `purchase(package)` method to initiate purchases:\n\n```js\nconst offerings = await Purchases.getOfferings();\nconst packageToPurchase = offerings.current.availablePackages[0];\nconst purchaseResult = await Purchases.purchasePackage(packageToPurchase);\n```\n\nThe result includes updated `CustomerInfo` on success.\n\n### Restoring Purchases\n\nProvide a user-triggered restore option using:\n\n```js\nawait Purchases.restoreTransactions();\n```\n\nAvoid calling restore programmatically on every launch to prevent OS sign-in prompts.\n\n### Syncing Purchases\n\nUse `syncPurchases()` to programmatically sync purchases without user interaction.\n\n---\n\n## 6. Receiving Real-Time Updates via Webhooks\n\nRevenueCat supports webhooks to notify your backend of subscription lifecycle events in real time.\n\n### Setting Up Webhooks\n\n- Configure webhook endpoints in the RevenueCat dashboard.\n- Webhooks include events such as initial purchase, renewal, cancellation, refund, billing issues, and more.\n- See [Sample Events](https://www.revenuecat.com/docs/integrations/webhooks/sample-events) for example payloads.\n\n### Security\n\n- Validate webhook signatures to ensure authenticity.\n- Use HTTPS endpoints.\n- Implement idempotency to handle retries.\n\n---\n\n## 7. Analyzing Revenue and Churn Metrics\n\nRevenueCat provides detailed analytics and charts on:\n\n- Monthly Recurring Revenue (MRR)\n- Revenue metrics and trends\n- Churn analysis\n- Conversion tracking\n- User behavior and retention metrics\n\nAccess these insights in the RevenueCat dashboard under **Charts**.\n\nYou can also export data or integrate with third-party analytics tools.\n\n---\n\n## 8. Implementing Custom Entitlement Logic\n\nRevenueCat’s entitlements system allows you to:\n\n- Define access levels based on subscription status.\n- Implement grace periods for billing issues.\n- Handle promotional offers and free trials.\n- Customize entitlement granting logic on your backend using RevenueCat’s REST API and webhooks.\n\nFor advanced use cases, you can:\n\n- Use the [CustomerInfo](https://www.revenuecat.com/docs/customers/customer-info) object to check active entitlements.\n- Implement server-side logic to grant or revoke access based on RevenueCat events.\n\n---\n\n## 9. Secure API Key Management\n\n### API Keys Overview\n\n- Use **public API keys** in your client apps (SDK configuration).\n- Use **secret API keys** only on your backend server for secure operations.\n\n### Best Practices\n\n- Never embed secret API keys in client apps.\n- Store secret keys securely on your backend.\n- Use environment variables or secure vaults for key storage.\n- Rotate keys periodically.\n- Limit collaborator access to secret keys; only administrators or owners can generate secret keys.\n\nRefer to the [Authentication guide](https://www.revenuecat.com/docs/projects/authentication) for detailed API key management.\n\n---\n\n## 10. Best Practices and Additional Resources\n\n### Testing\n\n- Use sandbox environments on Apple and Google stores.\n- Set up test accounts and licensed testers.\n- Enable debug logs in the SDK.\n- Test webhooks and Stripe integration in test mode.\n\n### Migration\n\n- For existing apps, consider server-side or client-side migration strategies.\n- Use the [Migrating Existing Subscriptions guide](https://www.revenuecat.com/docs/migrating-to-revenuecat/migrating-existing-subscriptions).\n\n### Customer Management\n\n- Use the RevenueCat dashboard or API to manage users.\n- Deleting users removes purchase history but does not cancel subscriptions on stores or Stripe.\n- Cancel Stripe subscriptions directly in the Stripe Dashboard.\n\n### Customer Center\n\n- Integrate the Customer Center UI to allow users to manage subscriptions.\n- Available in React Native via `react-native-purchases-ui`.\n\n### Attribution and Third-Party Integrations\n\n- RevenueCat supports integrations with attribution providers and analytics platforms.\n- Configure integrations in the dashboard.\n\n---\n\n## References and Further Reading\n\n- [RevenueCat React Native SDK Installation](https://www.revenuecat.com/docs/getting-started/installation/reactnative)\n- [Configuring the SDK](https://www.revenuecat.com/docs/getting-started/configuring-sdk)\n- [Stripe Billing Integration](https://www.revenuecat.com/docs/web/integrations/stripe)\n- [Managing Products and Entitlements](https://www.revenuecat.com/docs/getting-started/entitlements)\n- [Webhooks and Server Notifications](https://www.revenuecat.com/docs/integrations/webhooks)\n- [API Key Management](https://www.revenuecat.com/docs/projects/authentication)\n- [Handling Purchases and Restoring](https://www.revenuecat.com/docs/getting-started/making-purchases)\n- [Restoring Purchases](https://www.revenuecat.com/docs/getting-started/restoring-purchases)\n- [Customer Center React Native Integration](https://www.revenuecat.com/docs/tools/customer-center/customer-center-react-native)\n- [Best Practices for Security](https://www.revenuecat.com/docs/best-practices/security)\n\n---\n\nThis guide provides a comprehensive overview to get you started with RevenueCat in your React Native app, integrated with Stripe, and connected to your backend for real-time subscription tracking, analytics, and secure management. For detailed code samples and platform-specific instructions, please refer to the linked official documentation pages.",
  "analysis": {},
  "docsUsed": []
}
