stages: 
  - stage: Build 
    displayName: 'Build Docs'
    dependsOn: []
    jobs:
      - job: InstallAndBuild
        displayName: 'Install and build'
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - bash: |
              if [ "$(Build.Reason)" = "PullRequest" ]; then
                export DOC_BASE_URL=pr-$(System.PullRequest.PullRequestNumber)
              fi

              yarn
              yarn build
            displayName: 'yarn install and build'
          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: docs-build-files
            displayName: Publishing build artifact
  - stage: DeployToDevelopment
    displayName: "Deploy to development"
    dependsOn: [Build]
    condition: and(succeeded(), not(eq(variables['build.sourceBranch'], '${{ parameters.deploy_branch }}')))
    jobs:
      - deployment: DeployToDevelopment
        environment: dashboard-development
        displayName: "Deploy to development bucket"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          pr_number: $(System.PullRequest.PullRequestNumber)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to development bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number)"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number)/index.html ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number)/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Invalidate development distribution
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_development_distribution }} --paths "/pr-$(pr_number)/*"'
  - stage: DeployToStaging
    displayName: "Deploy to staging"
    dependsOn: [Build]
    condition: and(succeeded(), eq(variables['build.sourceBranch'], '${{ parameters.deploy_branch }}'))
    jobs:
      - deployment: DeployToStaging
        environment: dashboard-staging
        displayName: "Deploy to staging bucket"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to staging bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_staging_bucket_url }}"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_staging_bucket_url }}/index.html ${{ parameters.s3_staging_bucket_url }}/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Invalidate staging distribution
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_staging_distribution }} --paths "/docs/*"'
  - stage: DeployToProduction
    displayName: "Deploy to production"
    dependsOn: [DeployToStaging]
    jobs:
      - deployment: DeployToProduction
        environment: docs-production
        displayName: "Deploy to production bucket"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to production bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_production_bucket_url }}"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_production_bucket_url }}/index.html ${{ parameters.s3_production_bucket_url }}/index.html --metadata-directive REPLACE'
                # - task: AWSShellScript@1
                #   displayName: Invalidate production distribution
                #   inputs:
                #     awsCredentials: "AWS (azure-devops user)"
                #     regionName: "us-east-1"
                #     scriptType: "inline"
                #     inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_staging_distribution }} --paths "/docs/*"'












