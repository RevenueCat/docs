stages: 
  - stage: Build 
    displayName: 'Build Docs'
    dependsOn: []
    jobs:
      - job: InstallAndBuild
        displayName: 'Install and build'
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - script: |
              yarn
              DOC_BASE_URL=pr-$(System.PullRequest.PullRequestNumber) yarn build
            displayName: 'yarn install and build'
          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: docs-build-files
            displayName: Publishing build artifact
          - publish: $(System.DefaultWorkingDirectory)/deploy-scripts
            artifact: deploy-scripts
            displayName: Publishing deploy scripts artifact
  - stage: DeployToDevelopment
    displayName: "Deploy to development"
    dependsOn: [Build]
    condition: and(succeeded(), not(eq(variables['build.sourceBranch'], '${{ parameters.deploy_branch }}')))
    jobs:
      - deployment: DeployToDevelopment
        environment: dashboard-development
        displayName: "Deploy to development bucket"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          pr_number: $(System.PullRequest.PullRequestNumber)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to development bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number) --debug"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number)/index.html ${{ parameters.s3_development_bucket_url }}/pr-$(pr_number)/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Invalidate development distribution
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_development_distribution }} --paths "/pr-$(pr_number)/*"'
                - task: ShellScript@2
                  displayName: "Post comment in GitHub PR"
                  inputs:
                    scriptPath: $(Pipeline.Workspace)/deploy-scripts/post-github-comment.sh
                    args: $(pr_number) $(github_repo_token)