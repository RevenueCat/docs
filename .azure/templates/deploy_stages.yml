stages:
  - stage: Build
    displayName: "Build Docs"
    dependsOn: []
    jobs:
      - job: InstallAndBuild
        displayName: "Install and build"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "22.x"
            displayName: "Install Node.js"
          - bash: |
              set -e

              export ALGOLIA_APP_ID=$(ALGOLIA_APP_ID)
              export ALGOLIA_API_KEY=$(ALGOLIA_API_KEY)
              export ALGOLIA_INDEX_NAME=$(ALGOLIA_INDEX_NAME)
              export SEGMENT_WRITE_KEY=$(SEGMENT_WRITE_KEY)
              export GA_TRACKING_ID=$(GA_TRACKING_ID)
              export SIXSENSE_TOKEN=$(SIXSENSE_TOKEN)
              export GOOGLE_SITE_VERIFICATION=${GOOGLE_SITE_VERIFICATION}
              export HOCKEYSTACK_API_KEY=$(HOCKEYSTACK_API_KEY)

              yarn
              yarn build
              yarn clean-redirect-double-extensions
            displayName: "yarn install and build"
          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: docs-build-files
            displayName: Publishing build artifact
          - publish: $(System.DefaultWorkingDirectory)/cloudfront-functions
            artifact: cloudfront-functions
            displayName: Publishing CloudFront Functions
  - stage: DeployToStaging
    displayName: "Deploy to staging"
    dependsOn: [Build]
    condition: and(succeeded(), eq(variables['build.sourceBranch'], '${{ parameters.deploy_branch }}'))
    jobs:
      - deployment: DeployToStaging
        environment: docs-deployment-queue
        displayName: "Deploy to staging bucket"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to staging bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_staging_bucket_url }} --delete"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_staging_bucket_url }}/index.html ${{ parameters.s3_staging_bucket_url }}/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Update CloudFront Functions for staging
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: |
                      set -euo pipefail
                      cd $(Pipeline.Workspace)/cloudfront-functions

                      # Update request function
                      ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text 2>/dev/null || echo "")
                      if [ -z "$ETAG" ]; then
                        echo "Creating new function: docs-content-negotiation-request"
                        aws cloudfront create-function \
                          --name docs-content-negotiation-request \
                          --function-code fileb://content-negotiation-request.js \
                          --function-config Comment="Content negotiation for markdown",Runtime="cloudfront-js-2.0"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text)
                      else
                        echo "Updating function: docs-content-negotiation-request"
                        aws cloudfront update-function \
                          --name docs-content-negotiation-request \
                          --function-code fileb://content-negotiation-request.js \
                          --function-config Comment="Content negotiation for markdown",Runtime="cloudfront-js-2.0" \
                          --if-match "$ETAG"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text)
                      fi

                      echo "Publishing function: docs-content-negotiation-request"
                      aws cloudfront publish-function \
                        --name docs-content-negotiation-request \
                        --if-match "$ETAG"

                      # Update response function
                      ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text 2>/dev/null || echo "")
                      if [ -z "$ETAG" ]; then
                        echo "Creating new function: docs-content-negotiation-response"
                        aws cloudfront create-function \
                          --name docs-content-negotiation-response \
                          --function-code fileb://content-negotiation-response.js \
                          --function-config Comment="Add Link headers for markdown",Runtime="cloudfront-js-2.0"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text)
                      else
                        echo "Updating function: docs-content-negotiation-response"
                        aws cloudfront update-function \
                          --name docs-content-negotiation-response \
                          --function-code fileb://content-negotiation-response.js \
                          --function-config Comment="Add Link headers for markdown",Runtime="cloudfront-js-2.0" \
                          --if-match "$ETAG"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text)
                      fi

                      echo "Publishing function: docs-content-negotiation-response"
                      aws cloudfront publish-function \
                        --name docs-content-negotiation-response \
                        --if-match "$ETAG"
                - task: AWSShellScript@1
                  displayName: Invalidate staging distribution
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_staging_distribution }} --paths "/docs/*"'
  - stage: DeployToProduction
    displayName: "Deploy to production"
    dependsOn: [DeployToStaging]
    jobs:
      - deployment: DeployToProduction
        environment: docs-deployment-queue
        displayName: "Deploy to production bucket"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to production bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_production_bucket_url }} --delete"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_production_bucket_url }}/index.html ${{ parameters.s3_production_bucket_url }}/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Update CloudFront Functions for production
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: |
                      set -euo pipefail
                      cd $(Pipeline.Workspace)/cloudfront-functions

                      # Update request function
                      ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text 2>/dev/null || echo "")
                      if [ -z "$ETAG" ]; then
                        echo "Creating new function: docs-content-negotiation-request"
                        aws cloudfront create-function \
                          --name docs-content-negotiation-request \
                          --function-code fileb://content-negotiation-request.js \
                          --function-config Comment="Content negotiation for markdown",Runtime="cloudfront-js-2.0"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text)
                      else
                        echo "Updating function: docs-content-negotiation-request"
                        aws cloudfront update-function \
                          --name docs-content-negotiation-request \
                          --function-code fileb://content-negotiation-request.js \
                          --function-config Comment="Content negotiation for markdown",Runtime="cloudfront-js-2.0" \
                          --if-match "$ETAG"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-request --stage DEVELOPMENT --query 'ETag' --output text)
                      fi

                      echo "Publishing function: docs-content-negotiation-request"
                      aws cloudfront publish-function \
                        --name docs-content-negotiation-request \
                        --if-match "$ETAG"

                      # Update response function
                      ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text 2>/dev/null || echo "")
                      if [ -z "$ETAG" ]; then
                        echo "Creating new function: docs-content-negotiation-response"
                        aws cloudfront create-function \
                          --name docs-content-negotiation-response \
                          --function-code fileb://content-negotiation-response.js \
                          --function-config Comment="Add Link headers for markdown",Runtime="cloudfront-js-2.0"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text)
                      else
                        echo "Updating function: docs-content-negotiation-response"
                        aws cloudfront update-function \
                          --name docs-content-negotiation-response \
                          --function-code fileb://content-negotiation-response.js \
                          --function-config Comment="Add Link headers for markdown",Runtime="cloudfront-js-2.0" \
                          --if-match "$ETAG"
                        ETAG=$(aws cloudfront describe-function --name docs-content-negotiation-response --stage DEVELOPMENT --query 'ETag' --output text)
                      fi

                      echo "Publishing function: docs-content-negotiation-response"
                      aws cloudfront publish-function \
                        --name docs-content-negotiation-response \
                        --if-match "$ETAG"
                - ${{ each dist in parameters.cloudfront_production_distributions }}:
                    - task: AWSShellScript@1
                      displayName: Invalidate production distribution ${{ dist }}
                      timeoutInMinutes: 20
                      inputs:
                        awsCredentials: "AWS (azure-devops user)"
                        regionName: "us-east-1"
                        scriptType: "inline"
                        inlineScript: |
                          set -euo pipefail
                          DIST='${{ dist }}'

                          echo "Creating invalidation for $DIST"
                          INV_ID=$(aws cloudfront create-invalidation \
                            --distribution-id "$DIST" \
                            --paths "/docs/*" \
                            --query 'Invalidation.Id' --output text)

                          echo "Invalidation $INV_ID created for $DIST; waiting for completion..."
                          aws cloudfront wait invalidation-completed \
                            --distribution-id "$DIST" \
                            --id "$INV_ID"

                          echo "✅ Invalidation $INV_ID for $DIST completed."
                          aws cloudfront get-invalidation \
                            --distribution-id "$DIST" --id "$INV_ID" \
                            --query 'Invalidation.Status' --output text
