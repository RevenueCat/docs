stages:
  - stage: InitializeBuild
    displayName: 'Initialize Build'
    dependsOn: []
    jobs:
      - job: GetBuildInfo
        displayName: 'Get Build Information'
        pool:
          vmImage: 'ubuntu-22.04'
        steps:
          - bash: |
              if [ "$(Build.Reason)" = "PullRequest" ]; then
                build_type='pull_request'
                # PR builds use the PR merge commit, so we need to get information from the original one
                commit_sha=$(System.PullRequest.SourceCommitId)
                branch=$(System.PullRequest.SourceBranch)
                pr_number=$(System.PullRequest.PullRequestNumber)
              else
                build_type='branch_commit'
                commit_sha=$(Build.SourceVersion)
                branch=$(Build.SourceBranch)
                # Remove refs/heads/ prefix, assuming we only get branches and no tags here
                branch=${branch#refs/heads/}
                pr_number="null"
              fi
              commit_author=$(git show -s --format="%ae" ${commit_sha})
              commit_message=$(git show -s --format="%s" ${commit_sha})

              if [ "${branch}" = "${{ parameters.deploy_branch }}" ]; then
                push_tag="commit-${commit_sha}"
                # On the main branch, we can get the original PR number from the commit message
                pr_number=$(echo ${commit_message} | sed -nre "s/^.*\(#([0-9]+)\).*$/\1/p")
                [[ -z "$pr_number" ]] && pr_number="null"
                echo "##vso[task.setvariable variable=is_deploy_branch;isOutput=true]true"
              else
                # This will set the tag as pr-<branch> even when there's no associated PR
                push_tag="pr-"${branch//[\/]/-}
                echo "##vso[task.setvariable variable=is_deploy_branch;isOutput=true]false"
              fi

              pr_title=""
              if [[ "$pr_number" != "null" ]]; then
                pr_data=$(curl -s --location --retry 3 --request GET "https://api.github.com/repos/RevenueCat/docusaurus/pulls/${pr_number}" --header "Accept: application/vnd.github.v3+json" --header "Authorization: token $(github_repo_token)")
                pr_title=$(jq -r '.title' <<<"$pr_data")
                pr_labels=$(jq -r '.labels | map(.name) | join("|")' <<<"$pr_data")
              fi

              # Some variables can contain quotes, and they get inserted as macros in the SSH command below. We thus need
              # to escape " as \" (so it gives a valid JSON result) and then ' as '"'"' (so it works between two single quotes)
              commit_message_escaped=$(echo "$commit_message" | sed -e 's/"/\\"/g' -e "s/'/'\"'\"'/g")
              pr_title_escaped=$(echo "$pr_title" | sed -e 's/"/\\"/g' -e "s/'/'\"'\"'/g")

              echo "##vso[task.setvariable variable=build_type;isOutput=true]${build_type}"
              echo "##vso[task.setvariable variable=commit_sha;isOutput=true]${commit_sha}"
              echo "##vso[task.setvariable variable=pr_number;isOutput=true]${pr_number}"
              echo "##vso[task.setvariable variable=pr_title;isOutput=true]${pr_title}"
              echo "##vso[task.setvariable variable=pr_title_escaped;isOutput=true]${pr_title_escaped}"
              echo "##vso[task.setvariable variable=pr_labels;isOutput=true]${pr_labels}"
              echo "##vso[task.setvariable variable=branch;isOutput=true]${branch}"
              echo "##vso[task.setvariable variable=push_tag;isOutput=true]${push_tag}"
              echo "##vso[task.setvariable variable=commit_author;isOutput=true]${commit_author}"
              echo "##vso[task.setvariable variable=commit_message;isOutput=true]${commit_message}"
              echo "##vso[task.setvariable variable=commit_message_escaped;isOutput=true]${commit_message_escaped}"

              echo "
              Build information:
              - Build type: ${build_type}
              - Branch: ${branch}
              - PR Number: ${pr_number}
              - PR Title: ${pr_title}
              - PR Labels: ${pr_labels}
              - Commit sha: ${commit_sha}
              - Commit author: ${commit_author}
              - Commit message: ${commit_message}
              - Docker push tag: ${push_tag}
              "
            displayName: Get commit information
            name: BuildInfo
  - stage: Build 
    displayName: 'Build Docs'
    dependsOn: []
    jobs:
      - job: Install and build
        displayName: 'Install and build'
        pool:
          vmImage: 'ubuntu-22.04'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - script: |
              yarn
              yarn build
            displayName: 'yarn install and build'
          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: docs-build-files
            displayName: Publishing build artifact
  - stage: DeployToDevelopment
    displayName: "Deploy to development"
    dependsOn: [PushDockerImage, CacheDependencies, BuildProductionApp]
    condition: and(succeeded(), not(eq(variables['build.sourceBranch'], '${{ parameters.deploy_branch }}')))
    jobs:
      - deployment: DeployToDevelopment
        environment: dashboard-development
        displayName: "Deploy to development bucket"
        container: dashboard
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AWSShellScript@1
                  displayName: Deploy to development bucket
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: "aws s3 sync $(Pipeline.Workspace)/docs-build-files/ ${{ parameters.s3_development_bucket_url }}/$(pr_number) --debug"
                - task: AWSShellScript@1
                  displayName: Set no-cache and content-type metadata for index.html
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws s3 cp --cache-control "no-cache" --content-type "text/html" ${{ parameters.s3_development_bucket_url }}/$(pr_number)/index.html ${{ parameters.s3_development_bucket_url }}/$(pr_number)/index.html --metadata-directive REPLACE'
                - task: AWSShellScript@1
                  displayName: Invalidate development distribution
                  inputs:
                    awsCredentials: "AWS (azure-devops user)"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: 'aws cloudfront create-invalidation --distribution-id ${{ parameters.cloudfront_development_distribution }} --paths "/$(pr_number)/*"'
                - task: ShellScript@2
                  displayName: "Post comment in GitHub PR"
                  inputs:
                    scriptPath: $(Pipeline.Workspace)/deploy-scripts/post-github-comment.sh
                    args: $(pr_number) $(github_repo_token)